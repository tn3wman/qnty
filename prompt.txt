# Prompts

## Constants
[ ] numerical.py
[ ] solvers.py
[ ] tests.py

[ ] Please thorougly look for simplification opportunities and code smells in /src/qnty/constants/numerical.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[ ] Please thorougly look for simplification opportunities and code smells in /src/qnty/constants/solvers.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[ ] Please thorougly look for simplification opportunities and code smells in /src/qnty/constants/tests.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

## Dimensions
[x] base.py
[x] signature.py

[x] field_dims.py


[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/dimensions/base.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/dimensions/signature.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/dimensions/field_dims.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. This is a generated file so you will also have to fix /Users/tyler/Projects/qnty/codegen/generators/field_dims.py to generate the file correctly. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

## Equations

[x] equation.py
[x] system.py

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/equations/equation.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/equations/system.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

## Expressions

[x] formatter.py
[x] functions.py
[x] nodes.py
[x] scope_discovery.py

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/expressions/formatter.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/expressions/functions.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/expressions/nodes.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/expressions/scope_discovery.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

## Extensions

## Problems

[x] composition.py
[x] problem.py
[x] rules.py
[x] solving.py
[x] validation.py

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/problems/composition.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/problems/problem.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/problems/rules.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/problems/solving.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/problems/validation.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

## Quantities

[x] base_qnty.py
[x] field_qnty.py
[x] field_setter.py
[x] field_vars.py

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/quantities/base_qnty.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/quantities/field_qnty.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/quantities/field_setter.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. This is a generated file so you will also have to fix /Users/tyler/Projects/qnty/codegen/generators/field_setter.py.  Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/quantities/field_vars.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. This is a generated file so you will also have to fix /Users/tyler/Projects/qnty/codegen/generators/field_vars.py. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

## Solving

[x] base.py
[x] iterative.py
[x] simultaneous.py
[x] manager.py
[x] order.py

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/solving/solvers/base.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/solving/solvers/iterative.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/solving/solvers/simultaneous.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/solving/manager.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/solving/order.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

## Units

[x] field_units.py
[x] prefixes.py
[x] registry.py

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/units/field_units.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. This is a generated file so you will also have to fix /Users/tyler/Projects/qnty/codegen/generators/field_units.py to generate the file correctly. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/units/prefixes.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/units/registry.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

## Utils

[x] manager.py
[x] context.py
[x] exceptions.py
[x] handlers.py
[x] logging.py
[x] protocols.py
[x] scope_discovery.py

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/utils/manager.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/utils/context.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/utils/exceptions.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/utils/handlers.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/utils/logging.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/utils/protocols.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

[x] Please thorougly look for simplification opportunities and code smells in /src/qnty/utils/scope_discovery.py and fix the code as needed. Ensure all imports are at the top of the module and not within methods. Do not place imports under TYPE_CHECKING blocks. If there are any circular import issues, refactor the code to eliminate them. Avoid duck typing. After making changes, run all tests to confirm everything works correctly.

## Final

Profile the qnty/examples/composed_problem_demo.py and any other tests like test_benchmark.py and follow the profiling with a focus on simplifying the code, reducing complexity, fixing code smells, and improving performance.
