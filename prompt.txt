# Optimization Prompts - Performance & Code Quality Focus

## Core Package Files

### Main Package
[ ] __init__.py

[ ] Profile and optimize /src/qnty/__init__.py with a focus on import performance, reducing complexity, fixing code smells, eliminating circular imports, and improving startup time. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

### Constants Module
[ ] numerical.py
[ ] solvers.py  
[ ] tests.py

[ ] Profile and optimize /src/qnty/constants/numerical.py with a focus on mathematical constant performance, reducing complexity, fixing code smells, eliminating circular imports, and improving computational efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/constants/solvers.py with a focus on solver constant performance, reducing complexity, fixing code smells, eliminating circular imports, and improving solver efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/constants/tests.py with a focus on test constant performance, reducing complexity, fixing code smells, eliminating circular imports, and improving test efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

### Dimensions Module  
[ ] base.py
[ ] signature.py
[ ] field_dims.py

[ ] Profile and optimize /src/qnty/dimensions/base.py with a focus on dimensional analysis performance, reducing complexity, fixing code smells, eliminating circular imports, and improving prime number encoding efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/dimensions/signature.py with a focus on signature comparison performance, reducing complexity, fixing code smells, eliminating circular imports, and improving dimensional compatibility checking speed. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/dimensions/field_dims.py and its generator /codegen/generators/field_dims.py with a focus on dimension constant access performance, reducing complexity, fixing code smells, eliminating circular imports, and improving constant lookup speed. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

### Equations Module
[ ] equation.py
[ ] system.py

[ ] Profile and optimize /src/qnty/equations/equation.py with a focus on equation solving performance, reducing complexity, fixing code smells, eliminating circular imports, and improving mathematical operation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/equations/system.py with a focus on equation system performance, reducing complexity, fixing code smells, eliminating circular imports, and improving simultaneous solving efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

### Expressions Module
[ ] formatter.py
[ ] functions.py
[ ] nodes.py
[ ] types.py

[ ] Profile and optimize /src/qnty/expressions/formatter.py with a focus on expression formatting performance, reducing complexity, fixing code smells, eliminating circular imports, and improving string generation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/expressions/functions.py with a focus on mathematical function performance, reducing complexity, fixing code smells, eliminating circular imports, and improving function evaluation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/expressions/nodes.py with a focus on expression tree performance, reducing complexity, fixing code smells, eliminating circular imports, and improving node traversal and evaluation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/expressions/types.py with a focus on expression type system performance, reducing complexity, fixing code smells, eliminating circular imports, and improving type checking efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

### Extensions Module
[ ] integration/__init__.py
[ ] plotting/__init__.py  
[ ] reporting/__init__.py

[ ] Profile and optimize /src/qnty/extensions/integration/__init__.py with a focus on integration extension performance, reducing complexity, fixing code smells, eliminating circular imports, and improving external library integration efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/extensions/plotting/__init__.py with a focus on plotting extension performance, reducing complexity, fixing code smells, eliminating circular imports, and improving visualization efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/extensions/reporting/__init__.py with a focus on reporting extension performance, reducing complexity, fixing code smells, eliminating circular imports, and improving report generation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

### Problems Module
[ ] composition.py
[ ] problem.py
[ ] rules.py
[ ] solving.py
[ ] validation.py

[ ] Profile and optimize /src/qnty/problems/composition.py with a focus on problem composition performance, reducing complexity, fixing code smells, eliminating circular imports, and improving sub-problem integration efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/problems/problem.py with a focus on core problem system performance, reducing complexity, fixing code smells, eliminating circular imports, and improving variable management and equation solving efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/problems/rules.py with a focus on validation rule performance, reducing complexity, fixing code smells, eliminating circular imports, and improving rule evaluation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/problems/solving.py with a focus on problem solving performance, reducing complexity, fixing code smells, eliminating circular imports, and improving solver orchestration efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/problems/validation.py with a focus on validation system performance, reducing complexity, fixing code smells, eliminating circular imports, and improving check execution efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

### Quantities Module
[ ] base_qnty.py
[ ] field_qnty.py
[ ] field_setter.py
[ ] field_vars.py

[ ] Profile and optimize /src/qnty/quantities/base_qnty.py with a focus on base quantity performance, reducing complexity, fixing code smells, eliminating circular imports, and improving quantity operation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/quantities/field_qnty.py with a focus on field quantity performance, reducing complexity, fixing code smells, eliminating circular imports, and improving specialized quantity efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/quantities/field_setter.py and its generator /codegen/generators/field_setter.py with a focus on setter performance, reducing complexity, fixing code smells, eliminating circular imports, and improving fluent API efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/quantities/field_vars.py and its generator /codegen/generators/field_vars.py with a focus on variable class performance, reducing complexity, fixing code smells, eliminating circular imports, and improving variable instantiation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

### Solving Module
[ ] manager.py
[ ] order.py
[ ] solvers/base.py
[ ] solvers/iterative.py
[ ] solvers/simultaneous.py

[ ] Profile and optimize /src/qnty/solving/manager.py with a focus on solver management performance, reducing complexity, fixing code smells, eliminating circular imports, and improving solver selection and orchestration efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/solving/order.py with a focus on solving order performance, reducing complexity, fixing code smells, eliminating circular imports, and improving equation ordering efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/solving/solvers/base.py with a focus on base solver performance, reducing complexity, fixing code smells, eliminating circular imports, and improving solver foundation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/solving/solvers/iterative.py with a focus on iterative solver performance, reducing complexity, fixing code smells, eliminating circular imports, and improving iterative solving efficiency and convergence speed. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/solving/solvers/simultaneous.py with a focus on simultaneous solver performance, reducing complexity, fixing code smells, eliminating circular imports, and improving simultaneous equation solving efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

### Units Module
[ ] field_units.py
[ ] prefixes.py
[ ] registry.py

[ ] Profile and optimize /src/qnty/units/field_units.py and its generator /codegen/generators/field_units.py with a focus on unit constant performance, reducing complexity, fixing code smells, eliminating circular imports, and improving unit access efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/units/prefixes.py with a focus on SI prefix performance, reducing complexity, fixing code smells, eliminating circular imports, and improving prefix application efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/units/registry.py with a focus on unit registry performance, reducing complexity, fixing code smells, eliminating circular imports, and improving unit conversion efficiency with pre-computed lookup tables. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

### Utils Module
[ ] caching/manager.py
[ ] error_handling/context.py
[ ] error_handling/exceptions.py
[ ] error_handling/handlers.py
[ ] logging.py
[ ] protocols.py
[ ] scope_discovery.py

[ ] Profile and optimize /src/qnty/utils/caching/manager.py with a focus on caching performance, reducing complexity, fixing code smells, eliminating circular imports, and improving cache hit rates and memory efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/utils/error_handling/context.py with a focus on error context performance, reducing complexity, fixing code smells, eliminating circular imports, and improving error handling efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/utils/error_handling/exceptions.py with a focus on exception system performance, reducing complexity, fixing code smells, eliminating circular imports, and improving exception creation and handling efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/utils/error_handling/handlers.py with a focus on error handler performance, reducing complexity, fixing code smells, eliminating circular imports, and improving error handling efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/utils/logging.py with a focus on logging performance, reducing complexity, fixing code smells, eliminating circular imports, and improving logging efficiency with minimal performance impact. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/utils/protocols.py with a focus on protocol performance, reducing complexity, fixing code smells, eliminating circular imports, and improving type protocol efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /src/qnty/utils/scope_discovery.py with a focus on scope discovery performance, reducing complexity, fixing code smells, eliminating circular imports, and improving variable scope detection efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

## Code Generation System

### Generators
[ ] cli.py
[ ] data_processor.py
[ ] doc_generator.py
[ ] field_dims.py
[ ] field_setter.py
[ ] field_units.py
[ ] field_vars.py
[ ] stubs_gen.py

[ ] Profile and optimize /codegen/cli.py with a focus on code generation CLI performance, reducing complexity, fixing code smells, eliminating circular imports, and improving generation pipeline efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /codegen/generators/data_processor.py with a focus on data processing performance, reducing complexity, fixing code smells, eliminating circular imports, and improving unit data parsing efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /codegen/generators/doc_generator.py with a focus on documentation generation performance, reducing complexity, fixing code smells, eliminating circular imports, and improving docstring generation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /codegen/generators/field_dims.py with a focus on dimension generation performance, reducing complexity, fixing code smells, eliminating circular imports, and improving dimension constant generation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /codegen/generators/field_setter.py with a focus on setter generation performance, reducing complexity, fixing code smells, eliminating circular imports, and improving setter class generation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /codegen/generators/field_units.py with a focus on unit generation performance, reducing complexity, fixing code smells, eliminating circular imports, and improving unit constant generation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /codegen/generators/field_vars.py with a focus on variable generation performance, reducing complexity, fixing code smells, eliminating circular imports, and improving variable class generation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /codegen/generators/stubs_gen.py with a focus on stub generation performance, reducing complexity, fixing code smells, eliminating circular imports, and improving type stub generation efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

## Examples & Demos

[ ] comparison_demo.py
[ ] composed_problem_demo.py
[ ] simple_problem_demo.py
[ ] solve_methods_demo.py
[ ] unified_variable_demo.py  
[ ] unit_conversion_demo.py

[ ] Profile and optimize /examples/comparison_demo.py with a focus on demo performance, reducing complexity, fixing code smells, eliminating circular imports, and improving demonstration efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /examples/composed_problem_demo.py with a focus on composed problem demo performance, reducing complexity, fixing code smells, eliminating circular imports, and improving complex problem demonstration efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /examples/simple_problem_demo.py with a focus on simple demo performance, reducing complexity, fixing code smells, eliminating circular imports, and improving basic demonstration efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /examples/solve_methods_demo.py with a focus on solving demo performance, reducing complexity, fixing code smells, eliminating circular imports, and improving solver demonstration efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /examples/unified_variable_demo.py with a focus on variable demo performance, reducing complexity, fixing code smells, eliminating circular imports, and improving variable demonstration efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /examples/unit_conversion_demo.py with a focus on conversion demo performance, reducing complexity, fixing code smells, eliminating circular imports, and improving conversion demonstration efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

## Test Suite

[ ] test_benchmark.py
[ ] test_dimension.py
[ ] test_equations.py
[ ] test_examples.py
[ ] test_prefixes.py
[ ] test_setters.py
[ ] test_type_hinting.py

[ ] Profile and optimize /tests/test_benchmark.py with a focus on benchmark test performance, reducing complexity, fixing code smells, eliminating circular imports, and improving benchmarking efficiency and accuracy. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /tests/test_dimension.py with a focus on dimension test performance, reducing complexity, fixing code smells, eliminating circular imports, and improving dimensional testing efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /tests/test_equations.py with a focus on equation test performance, reducing complexity, fixing code smells, eliminating circular imports, and improving equation testing efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /tests/test_examples.py with a focus on example test performance, reducing complexity, fixing code smells, eliminating circular imports, and improving example testing efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /tests/test_prefixes.py with a focus on prefix test performance, reducing complexity, fixing code smells, eliminating circular imports, and improving prefix testing efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /tests/test_setters.py with a focus on setter test performance, reducing complexity, fixing code smells, eliminating circular imports, and improving setter testing efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

[ ] Profile and optimize /tests/test_type_hinting.py with a focus on type hint test performance, reducing complexity, fixing code smells, eliminating circular imports, and improving type testing efficiency. Ensure all imports are at the top of the module and not within methods. Avoid duck typing and add proper type hints. Run benchmarks to confirm performance improvements.

## Final Performance Analysis

[ ] Overall System Profiling

[ ] Conduct comprehensive end-to-end performance profiling of the entire qnty library using examples/composed_problem_demo.py, tests/test_benchmark.py, and other performance-critical paths. Focus on identifying bottlenecks across module boundaries, optimizing import chains, reducing memory allocations, improving cache utilization, and enhancing overall system performance. Create detailed performance reports with before/after metrics and optimization recommendations for maintaining the library's 15-20x performance advantage over competing libraries.