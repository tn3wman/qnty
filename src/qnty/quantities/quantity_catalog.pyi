# isort: skip_file
from __future__ import annotations

from typing import overload

from ..units.core import Unit
from .core import FieldQuantity, FieldSetter, UnitApplier, UnitChanger


class AccelerationSetter(FieldSetter[Acceleration]):
    @property
    def foot_per_square_second(self) -> Acceleration: ...
    @property
    def feet_per_second_squared(self) -> Acceleration: ...
    @property
    def feet_per_square_second(self) -> Acceleration: ...
    @property
    def foot_per_second_squared(self) -> Acceleration: ...
    @property
    def meter_per_square_second(self) -> Acceleration: ...
    @property
    def meters_per_square_second(self) -> Acceleration: ...


class Acceleration(FieldQuantity[Acceleration]):
    class ToUnit(UnitApplier[Acceleration]):
        @property
        def foot_per_square_second(self) -> Acceleration: ...
        @property
        def feet_per_second_squared(self) -> Acceleration: ...
        @property
        def feet_per_square_second(self) -> Acceleration: ...
        @property
        def foot_per_second_squared(self) -> Acceleration: ...
        @property
        def meter_per_square_second(self) -> Acceleration: ...
        @property
        def meters_per_square_second(self) -> Acceleration: ...

        def __call__(self, unit: Unit[Acceleration] | str) -> Acceleration: ...

    class AsUnit(UnitChanger[Acceleration]):
        @property
        def foot_per_square_second(self) -> Acceleration: ...
        @property
        def feet_per_second_squared(self) -> Acceleration: ...
        @property
        def feet_per_square_second(self) -> Acceleration: ...
        @property
        def foot_per_second_squared(self) -> Acceleration: ...
        @property
        def meter_per_square_second(self) -> Acceleration: ...
        @property
        def meters_per_square_second(self) -> Acceleration: ...

        def __call__(self, unit: Unit[Acceleration] | str) -> Acceleration: ...

    @property
    def to_unit(self) -> Acceleration.ToUnit: ...

    @property
    def as_unit(self) -> Acceleration.AsUnit: ...

    @overload
    def set(self, value: float) -> AccelerationSetter: ...
    @overload
    def set(self, value: float, unit: Unit[Acceleration]) -> Acceleration: ...
    @overload
    def set(self, value: float, unit: str) -> Acceleration: ...


