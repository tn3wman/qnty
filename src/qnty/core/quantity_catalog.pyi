# isort: skip_file
from __future__ import annotations

from typing import overload

from .unit import Unit
from .quantity import Quantity, QuantitySetter, UnitApplier, UnitChanger

class DimensionlessSetter(QuantitySetter[Dimensionless]):
    @property
    def dimensionless(self) -> Dimensionless: ...
    @property
    def dless(self) -> Dimensionless: ...
    @property
    def scalar(self) -> Dimensionless: ...

class Dimensionless(Quantity[Dimensionless]):
    def __init__(self, name: str, value: float | None = None, preferred: Unit[Dimensionless] | None = None) -> None: ...

class AccelerationSetter(QuantitySetter[Acceleration]):
    @property
    def foot_per_square_second(self) -> Acceleration: ...
    @property
    def feet_per_second_squared(self) -> Acceleration: ...
    @property
    def feet_per_square_second(self) -> Acceleration: ...
    @property
    def foot_per_second_squared(self) -> Acceleration: ...
    @property
    def meter_per_square_second(self) -> Acceleration: ...
    @property
    def meters_per_square_second(self) -> Acceleration: ...


class Acceleration(Quantity[Acceleration]):
    def __init__(self, name: str, value: float | None = None, preferred: Unit[Acceleration] | None = None) -> None: ...
    class ToUnit(UnitApplier[Acceleration]):
        @property
        def foot_per_square_second(self) -> Acceleration: ...
        @property
        def feet_per_second_squared(self) -> Acceleration: ...
        @property
        def feet_per_square_second(self) -> Acceleration: ...
        @property
        def foot_per_second_squared(self) -> Acceleration: ...
        @property
        def meter_per_square_second(self) -> Acceleration: ...
        @property
        def meters_per_square_second(self) -> Acceleration: ...

        def __call__(self, unit: Unit[Acceleration] | str) -> Acceleration: ...

    class AsUnit(UnitChanger[Acceleration]):
        @property
        def foot_per_square_second(self) -> Acceleration: ...
        @property
        def feet_per_second_squared(self) -> Acceleration: ...
        @property
        def feet_per_square_second(self) -> Acceleration: ...
        @property
        def foot_per_second_squared(self) -> Acceleration: ...
        @property
        def meter_per_square_second(self) -> Acceleration: ...
        @property
        def meters_per_square_second(self) -> Acceleration: ...

        def __call__(self, unit: Unit[Acceleration] | str) -> Acceleration: ...

    @property
    def to_unit(self) -> Acceleration.ToUnit: ...

    @property
    def as_unit(self) -> Acceleration.AsUnit: ...

    @overload
    def set(self, value: float) -> AccelerationSetter: ...
    @overload
    def set(self, value: float, unit: Unit[Acceleration]) -> Acceleration: ...
    @overload
    def set(self, value: float, unit: str) -> Acceleration: ...

class LengthSetter(QuantitySetter[Length]):
    @property
    def meter(self) -> Length: ...
    @property
    def meters(self) -> Length: ...
    @property
    def foot(self) -> Length: ...
    @property
    def feet(self) -> Length: ...

class Length(Quantity[Length]):
    def __init__(self, name: str, value: float | None = None, preferred: Unit[Length] | None = None) -> None: ...
    class ToUnit(UnitApplier[Length]):
        @property
        def meter(self) -> Length: ...
        @property
        def meters(self) -> Length: ...
        @property
        def foot(self) -> Length: ...
        @property
        def feet(self) -> Length: ...

        def __call__(self, unit: Unit[Length] | str) -> Length: ...
    class AsUnit(UnitChanger[Length]):
        @property
        def meter(self) -> Length: ...
        @property
        def meters(self) -> Length: ...
        @property
        def foot(self) -> Length: ...
        @property
        def feet(self) -> Length: ...

        def __call__(self, unit: Unit[Length] | str) -> Length: ...
    @property
    def to_unit(self) -> Length.ToUnit: ...
    @property
    def as_unit(self) -> Length.AsUnit: ...
    @overload
    def set(self, value: float) -> LengthSetter: ...
    @overload
    def set(self, value: float, unit: Unit[Length]) -> Length: ...
    @overload
    def set(self, value: float, unit: str) -> Length: ...

